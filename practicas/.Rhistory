cdfcomp(mod1) #Función de Distribución
qqcomp(mod1) #cuantiles Teóricos vs Empiricos
ppcomp(mod1) #Probabilidades Teóricas vs Empiricas
mod1 <- fitdist(datos, "gamma", method = c("mle"))
mod1
summary(mod1)
par(mfrow = c(2,2))
denscomp(mod1) # Función de Densidad
cdfcomp(mod1) #Función de Distribución
qqcomp(mod1) #cuantiles Teóricos vs Empiricos
ppcomp(mod1) #Probabilidades Teóricas vs Empiricas
runApp('Desktop/codigosde R/Primer_shiny.R')
distributions <- c("Beta",
"Binomial",####### binom
"Cauchy",
"Distribución-F",
"Gamma",
"Hipergeómetrica",############3
"Lognormal",
"Multinomial",
"Binomial Negativa",#######pro
"Normal",
"Uniforme",
"Weibull")
distributions_1 <- c(
"Exponencial",##########
"Geométrica",##############1
"T Student",
"Xi-Cuadrada",
"Poisson"##############1
)
# Define UI for random distribution app ----
ui <- fluidPage(
# App title ----
titlePanel("Tabsets"),
theme = shinythemes::shinytheme('superhero'),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select the random distribution type ----
selectInput('dist',label="Distribuciones de un Solo Parámetro",
choices = distributions_1),
# br() element to introduce extra vertical spacing ----
br(),
# Input: Slider for the number of observations to generate ----
sliderInput("n",
"Number of observations:",
value = 500,
min = 1,
max = 1000),
sliderInput(inputId = "p1",label="Parametro 1",
value=.5,min=0,max=1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Tabset w/ plot, summary, and table ----
tabsetPanel(type = "tabs",
tabPanel('Datos',
plotOutput("gg1")),
tabPanel('Histograma',
plotOutput("plot")),
tabPanel('Empirica vs Teórica',
plotOutput("gg3")),
tabPanel('Caja',
plotOutput("gg4")),
tabPanel('Densidad',
plotOutput("gg5")),
tabPanel('Distribución',
plotOutput("gg6")),
tabPanel('Sobrevivencia',
plotOutput("gg7"))),
verbatimTextOutput("tt1")
)
),
sidebarLayout(
sidebarPanel(
selectInput('dist1',label="Distribuciones de Dos Parémetros",
choices = distributions),
sliderInput(inputId = "n1",label="Número de Simulaciones",
value=500,min = 1,max = 1000),
sliderInput(inputId = "pp1",label="Parametro 1",
value=1,min=0,max=100),
sliderInput(inputId = "pp2",label="Parametro 2",
value=.5,min=0,max=1)),
mainPanel(
tabsetPanel(
tabPanel('Datos',
plotOutput("g1")),
tabPanel('Histograma',
plotOutput("g2")),
tabPanel('Empirica vs Teórica',
plotOutput("g3")),
tabPanel('Caja',
plotOutput("g4")),
tabPanel('Densidad',
plotOutput("g5")),
tabPanel('Distribución',
plotOutput("g6")),
tabPanel('Sobrevivencia',
plotOutput("g7")),
tabPanel('QQ-Plot',
plotOutput("g8"))),
verbatimTextOutput("t1")
)
)
)
server <- function(input, output) {
################server 1 ##################
###dist, n, p1
cur_den <-  function(v, type) {
switch(type,
"Xi-Cuadrada"= dchisq(v,input$p1),
"Exponencial" = dexp(v,input$p1),
"T Student"=dt(v,input$p1),
"Geométrica"=dgeom(v,input$p1),
"Poisson"=dpois(v,input$p1))
}
cur_dis <-  function(v, type) {
switch(type,
"Xi-Cuadrada"= pchisq(v,input$p1),
"Exponencial" = pexp(v,input$p1),
"T Student"= pt(v,input$p1),
"Geométrica"= pgeom(v,input$p1),
"Poisson"= ppois(v,input$p1))
}
d <- reactive({
dist <- switch(input$dist,
"Beta" = rbeta,
"Binomial" =rbinom,
"Cauchy"= rcauchy,
"Xi-Cuadrada"= rchisq,
"Exponencial" = rexp,
"Distribución-F"=rf,
"Gamma"=rgamma,
"Geométrica"=rgeom,
"Hipergeómetrica"=rhyper,
"Lognormal"=rlnorm,
"Multinomial"=rmultinom,
"Binomial Negativa"=rnbinom,
"Normal"=rnorm,
"Poisson"=rpois,
"T Student"=rt,
"Uniforme"=runif,
"Weibull"=rweibull)
dist(input$n, input$p1)
})
output$plot <- renderPlot({
hist(d(),
main = paste("Histograma"),
freq = FALSE,
col = "gray", border = "white")
typ <- input$dist
curve(cur_den(x,typ), xlim= c(0, 15),
col= "blue", lwd = 5,
add = TRUE)
})
output$gg1 <- renderPlot({
plot(d(),
main = paste("Datos Simulados"))
})
output$gg3 <- renderPlot({
typ <- input$dist
plot(ecdf(d()),main = paste("Distribución"))
curve(cur_dis(x,typ),col="red",
main="Funci?n de Distribuci?n",add = TRUE)
legend("topleft",lty = c(2,1),lwd = c(1,2),
col=c("black","red"),legend = c("Emp?rica","Teorica"))
})
output$gg4 <- renderPlot({
boxplot(d(), main = paste("Caja y Brazos"))
})
output$tt1 <- renderPrint({
summary(d())})
output$gg5 <- renderPlot({
typ <- input$dist
curve(cur_den(x,typ), xlim= c(input$p1 - 3, input$p1 + 3),
col= "blue",main = paste("Densidad"), lwd = 5)
})
output$gg6 <- renderPlot({
typ <- input$dist
curve(cur_dis(x,typ), xlim= c(0, 15),
main = paste("Distribución"),col= "blue", lwd = 5)
})
output$gg7 <- renderPlot({
typ <- input$dist
curve(1 - cur_dis(x,typ), xlim= c(0, 15),
main = paste("Sobrevivencia"),col= "blue", lwd = 5)
})
############################server 2 ####################
cur_den2 <-  function(v, type) {
switch(type,
"Normal" = dnorm(v,input$pp1,input$pp2),
"Uniforme" = dunif(v,input$pp1,input$pp2),
"Lognormal" = dlnorm(v,input$pp1,input$pp2),
"Beta" = dbeta(v,input$pp1,input$pp2),
"Binomial" =dbinom(v,input$pp1,input$pp2),
"Cauchy"= dcauchy(v,input$pp1,input$pp2),
"Xi-Cuadrada"= dchisq(v,input$pp1,input$pp2),
"Exponencial" = dexp(v,input$pp1,input$pp2),
"Distribución-F"=df(v,input$pp1,input$pp2),
"Gamma"=dgamma(v,input$pp1,input$pp2),
"Geométrica"=dgeom(v,input$pp1,input$pp2),
"Hipergeómetrica"=dhyper(v,input$pp1,input$pp2),
"Lognormal"=dlnorm(v,input$pp1,input$pp2),
"Multinomial"=dmultinom(v,input$pp1,input$pp2),
"Binomial Negativa"=dnbinom(v,input$pp1,input$pp2),
"Normal"=dnorm(v,input$pp1,input$pp2),
"Poisson"=dpois(v,input$pp1,input$pp2),
"T Student"=dt(v,input$pp1,input$pp2),
"Uniforme"=dunif(v,input$pp1,input$pp2),
"Weibull"=dweibull(v,input$pp1,input$pp2))
}
cur_dis2 <-  function(v, type) {
switch(type,
"Normal" = pnorm(v,input$pp1,input$pp2),
"Uniforme" = punif(v,input$pp1,input$pp2),
"Lognormal" = plnorm(v,input$pp1,input$pp2),
"Beta" = pbeta(v,input$pp1,input$pp2),
"Binomial" =pbinom(v,input$pp1,input$pp2),
"Cauchy"= pcauchy(v,input$pp1,input$pp2),
"Xi-Cuadrada"= pchisq(v,input$pp1,input$pp2),
"Exponencial" = pexp(v,input$pp1,input$pp2),
"Distribución-F"=df(v,input$pp1,input$pp2),
"Gamma"=pgamma(v,input$pp1,input$pp2),
"Geométrica"=pgeom(v,input$pp1,input$pp2),
"Hipergeómetrica"=phyper(v,input$pp1,input$pp2),
"Lognormal"=plnorm(v,input$pp1,input$pp2),
"Multinomial"=pmultinom(v,input$pp1,input$pp2),
"Binomial Negativa"=pnbinom(v,input$pp1,input$pp2),
"Normal"=pnorm(v,input$pp1,input$pp2),
"Poisson"=ppois(v,input$pp1,input$pp2),
"T Student"=pt(v,input$pp1,input$pp2),
"Uniforme"=punif(v,input$pp1,input$pp2),
"Weibull"=pweibull(v,input$pp1,input$pp2))
}
data <- reactive({  ###dist1, n1, pp1,pp2
dist1 <- switch(input$dist1,
"Normal" = rnorm,
"Uniforme" = runif,
"Lognormal" = rlnorm,
"Exponencial" = rexp,
"Beta" = rbeta,
"Binomial" =rbinom,
"Cauchy"= rcauchy,
"Xi-Cuadrada"= rchisq,
"Exponencial" = rexp,
"Distribución-F"=rf,
"Gamma"=rgamma,
"Geométrica"=rgeom,
"Hipergeómetrica"=rhyper,
"Lognormal"=rlnorm,
"Multinomial"=rmultinom,
"Binomial Negativa"=rnbinom,
"Normal"=rnorm,
"Poisson"=rpois,
"T Student"=rt,
"Uniforme"=runif,
"Weibull"=rweibull)
dist1(input$n1,input$pp1, input$pp2)
})
output$g1 <- renderPlot({
plot(data())
})
output$g2 <- renderPlot({
hist(data(), freq = FALSE, main = "Histograma",border = "white")
typ1 <- input$dist1
curve(cur_den2(x,typ1), xlim= c(-15, 15),
col= "blue", lwd = 5,
add = TRUE)
})
output$g3 <- renderPlot({
typ1 <- input$dist1
plot(ecdf(data()))
curve(cur_dis2(x,typ1),col="red",
main="Funci?n de Distribuci?n",add = TRUE)
legend("topleft",lty = c(2,1),lwd = c(1,2),
col=c("black","red"),legend = c("Emp?rica","Teorica"))
})
output$t1 <- renderPrint({
summary(data())})
output$g4 <- renderPlot({
boxplot(data())
})
output$g5 <- renderPlot({
typ1 <- input$dist1
curve(cur_den2(x,typ1), xlim= c(-5, 5), col= "blue", lwd = 5)
})
output$g6 <- renderPlot({
typ1 <- input$dist1
curve(cur_dis2(x,typ1), xlim= c(0, 1), col= "blue", lwd = 5)
})
output$g7 <- renderPlot({
typ1 <- input$dist1
curve(1 - cur_dis2(x,typ1), xlim= c(0, 1), col= "blue", lwd = 5)
})
output$g8 <- renderPlot({
typ1 <- input$dist1
mod1 <- fitdist(data(), typ1, method = c("mle"))
qqplot(mod1) #cuantiles Teóricos vs Empiricos
})
}
# Create Shiny app ----
shinyApp(ui, server)
runApp('Desktop/codigosde R/Primer_shiny.R')
runApp('Primer_shiny.R')
runApp('Desktop/codigosde R/Primer_shiny.R')
runApp('Desktop/codigosde R/Primer_shiny.R')
runApp('Desktop/codigosde R/Primer_shiny.R')
source("~/Desktop/codigosde R/Ajuste_densidad.R", echo=TRUE)
source("~/Desktop/codigosde R/Ajuste_densidad.R", echo=TRUE)
source("~/Desktop/codigosde R/Ajuste_densidad.R", echo=TRUE)
source("~/Desktop/codigosde R/Ajuste_densidad.R", echo=TRUE)
source("~/Desktop/codigosde R/Ajuste_densidad.R", echo=TRUE)
source("~/Desktop/codigosde R/Ajuste_densidad.R", echo=TRUE)
denscomp(mod1) # Función de Densidad
cdfcomp(mod1) #Función de Distribución
qqcomp(mod1) #cuantiles Teóricos vs Empiricos
ppcomp(mod1) #Probabilidades Teóricas vs Empiricas
runApp('Desktop/codigosde R/practicas/Primer_shiny.R')
runApp('Desktop/codigosde R/practicas/Primer_shiny.R')
p#En este caso N = 40 y K = 2.
source("~/Desktop/codigosde R/econometría/eco_3.1.R", echo=TRUE)
runApp('Desktop/codigosde R/practicas/Primer_shiny.R')
install.packages("distributions")
install.packages("Distributions")
source("~/Desktop/codigosde R/econometría/eco_3.1.R", echo=TRUE)
runApp('Desktop/codigosde R/practicas/Primer_shiny.R')
source("~/Desktop/codigosde R/Modelos de Pérdida/Ajuste_densidad.R", echo=TRUE)
runApp('Desktop/codigosde R/practicas/Primer_shiny.R')
gofstat(list(mod2, mod3, mod4))
data <- tibble(x_dt, y_dt)
ggplot(data,aes(x_dt, y_dt)) + geom_point() +
geom_vline(xintercept = c(tc), color='red') +
geom_vline(xintercept = p_valor, color = 'green')
runApp('Desktop/codigosde R/practicas/Primer_shiny.R')
runApp('Desktop/codigosde R/practicas/Primer_shiny.R')
(paraqq('Beta'))
paraqq <- function(type){
switch(type,
"Beta" = 'beta',
"Binomial" ='binom',
"Cauchy"= 'cauchy',
"Xi-Cuadrada"= 'chisq',
"Exponencial" = 'exp',
"Distribución-F"='f',
"Gamma"= 'gamma',
"Geométrica"= 'geom',
"Hipergeómetrica"= 'hyper',
"Lognormal"= 'lnorm',
"Multinomial"= 'multinom',
"Binomial Negativa"= 'nbinom',
"Normal"= 'norm',
"Poisson"= 'pois',
"T Student"= 't',
"Uniforme"= 'unif',
"Weibull"= 'weibull')
(paraqq('Beta'))
}
(paraqq('Beta'))
(paraqq("Beta"))
(paraqq(perro))
paraqq(perro)
paraqq <- function(type){
switch(
"Beta" = 'beta',
"Binomial" ='binom',
"Cauchy"= 'cauchy',
"Xi-Cuadrada"= 'chisq',
"Exponencial" = 'exp',
"Distribución-F"='f',
"Gamma"= 'gamma',
"Geométrica"= 'geom',
"Hipergeómetrica"= 'hyper',
"Lognormal"= 'lnorm',
"Multinomial"= 'multinom',
"Binomial Negativa"= 'nbinom',
"Normal"= 'norm',
"Poisson"= 'pois',
"T Student"= 't',
"Uniforme"= 'unif',
"Weibull"= 'weibull')
}
paraqq(perro)
centre <- function(v, type) {
switch(type,
"Normal" = 'beta',
"Uniforme" = dunif(v,2,4),
"Lognormal" = dlnorm(v,2,4))
}
centre(v,perro)
paraqq <- function(v,type){
switch(
"Beta" = 'beta',
"Binomial" ='binom',
"Cauchy"= 'cauchy',
"Xi-Cuadrada"= 'chisq',
"Exponencial" = 'exp',
"Distribución-F"='f',
"Gamma"= 'gamma',
"Geométrica"= 'geom',
"Hipergeómetrica"= 'hyper',
"Lognormal"= 'lnorm',
"Multinomial"= 'multinom',
"Binomial Negativa"= 'nbinom',
"Normal"= 'norm',
"Poisson"= 'pois',
"T Student"= 't',
"Uniforme"= 'unif',
"Weibull"= 'weibull')
}
paraqq(perro)
paraqq(v,perro)
paraqq(v,perro)
paraqq(2,perro)
centre(v,perro)
paraqq(2,perro)
centre(v,perro)
centre(v,perro)
perro <- 'Binomial'
centre(v,perro)
centre(v,perro)
q<- centre(v,perro)
q
centre(v,perro)
perro <- "Normal"
centre <- function(v, type) {
switch(type,
"Normal" = 'beta',
"Uniforme" = dunif(v,2,4),
"Lognormal" = dlnorm(v,2,4))
}
centre(v,perro)
perro <- "Normal"
centre <- function(v, type) {
switch(type,
"Beta" = 'beta',
"Binomial" ='binom',
"Cauchy"= 'cauchy',
"Xi-Cuadrada"= 'chisq',
"Exponencial" = 'exp',
"Distribución-F"='f',
"Gamma"= 'gamma',
"Geométrica"= 'geom',
"Hipergeómetrica"= 'hyper',
"Lognormal"= 'lnorm',
"Multinomial"= 'multinom',
"Binomial Negativa"= 'nbinom',
"Normal"= 'norm',
"Poisson"= 'pois',
"T Student"= 't',
"Uniforme"= 'unif',
"Weibull"= 'weibull'}
centre(v,perro)
paraqq <- function(v,type){
switch(type,
"Beta" = 'beta',
"Binomial" ='binom',
"Cauchy"= 'cauchy',
"Xi-Cuadrada"= 'chisq',
"Exponencial" = 'exp',
"Distribución-F"='f',
"Gamma"= 'gamma',
"Geométrica"= 'geom',
"Hipergeómetrica"= 'hyper',
"Lognormal"= 'lnorm',
"Multinomial"= 'multinom',
"Binomial Negativa"= 'nbinom',
"Normal"= 'norm',
"Poisson"= 'pois',
"T Student"= 't',
"Uniforme"= 'unif',
"Weibull"= 'weibull')
}
paraqq(2,perro)
paraqq <- function(v,type){
switch(type,
"Beta" = 'beta',
"Binomial" ='binom',
"Cauchy"= 'cauchy',
"Xi-Cuadrada"= 'chisq',
"Exponencial" = 'exp',
"Distribución-F"='f',
"Gamma"= 'gamma',
"Geométrica"= 'geom',
"Hipergeómetrica"= 'hyper',
"Lognormal"= 'lnorm',
"Multinomial"= 'multinom',
"Binomial Negativa"= 'nbinom',
"Normal"= 'norm',
"Poisson"= 'pois',
"T Student"= 't',
"Uniforme"= 'unif',
"Weibull"= 'weibull')
}
paraqq(2,perro)
runApp('Desktop/codigosde R/practicas/Primer_shiny.R')
runApp('Desktop/codigosde R/practicas/Primer_shiny.R')
runApp('Desktop/codigosde R/practicas/Primer_shiny.R')
runApp('Desktop/codigosde R/practicas/Primer_shiny.R')
fitnames = c("Weibull", "Pareto", "Lognormal")
######################3
source("~/Desktop/codigosde R/Modelos de Pérdida/Ajuste_densidad.R", echo=TRUE)
mod1 <- fitdist(datos, "gamma", method = c("mme"))
mod1
summary(mod1)
par(mfrow = c(2,2))
denscomp(mod1) # Función de Densidad
cdfcomp(mod1) #Función de Distribución
qqcomp(mod1) #cuantiles Teóricos vs Empiricos
ppcomp(mod1) #Probabilidades Teóricas vs Empiricas
runApp('Desktop/codigosde R/practicas/Primer_shiny.R')
