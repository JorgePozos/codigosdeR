n <- 20
lambda <- 30
aprox <- function(x) (1/(sqrt(140)))*dnorm((x - lambda*2)/sqrt(140))
ggplot(data, aes(x=r, y=g)) + geom_bar(stat="identity", fill="steelblue") +
stat_function(fun = aprox, color = 'blue')
#
#
#################################################################
#
#################################################################
# Fin de c\’odigo
#
#################################################################
# Fin de c\’odigo
#################################################################
#
#################################################################
# Fin de c\’odigo
#################################################################
#
#################################################################
# Fin de c\’odigo
#################################################################
lambda <- 34
lambda <- 4
aprox <- function(x) (1/(sqrt(140)))*dnorm((x - lambda*2)/sqrt(140))
ggplot(data, aes(x=r, y=g)) + geom_bar(stat="identity", fill="steelblue") +
stat_function(fun = aprox, color = 'blue')
lambda <- 5
aprox <- function(x) (1/(sqrt(140)))*dnorm((x - lambda*2)/sqrt(140))
ggplot(data, aes(x=r, y=g)) + geom_bar(stat="identity", fill="steelblue") +
stat_function(fun = aprox, color = 'blue')
lambda <- 6
aprox <- function(x) (1/(sqrt(140)))*dnorm((x - lambda*2)/sqrt(140))
ggplot(data, aes(x=r, y=g)) + geom_bar(stat="identity", fill="steelblue") +
stat_function(fun = aprox, color = 'blue')
lambda <- 8
aprox <- function(x) (1/(sqrt(140)))*dnorm((x - lambda*2)/sqrt(140))
ggplot(data, aes(x=r, y=g)) + geom_bar(stat="identity", fill="steelblue") +
stat_function(fun = aprox, color = 'blue')
lambda <- 9
aprox <- function(x) (1/(sqrt(140)))*dnorm((x - lambda*2)/sqrt(140))
ggplot(data, aes(x=r, y=g)) + geom_bar(stat="identity", fill="steelblue") +
stat_function(fun = aprox, color = 'blue')
lambda <- 10
aprox <- function(x) (1/(sqrt(140)))*dnorm((x - lambda*2)/sqrt(140))
ggplot(data, aes(x=r, y=g)) + geom_bar(stat="identity", fill="steelblue") +
stat_function(fun = aprox, color = 'blue')
lambda <- 15
aprox <- function(x) (1/(sqrt(140)))*dnorm((x - lambda*2)/sqrt(140))
ggplot(data, aes(x=r, y=g)) + geom_bar(stat="identity", fill="steelblue") +
stat_function(fun = aprox, color = 'blue')
lambda <- 25
aprox <- function(x) (1/(sqrt(140)))*dnorm((x - lambda*2)/sqrt(140))
ggplot(data, aes(x=r, y=g)) + geom_bar(stat="identity", fill="steelblue") +
stat_function(fun = aprox, color = 'blue')
lambda <- 30
aprox <- function(x) (1/(sqrt(140)))*dnorm((x - lambda*2)/sqrt(140))
ggplot(data, aes(x=r, y=g)) + geom_bar(stat="identity", fill="steelblue") +
stat_function(fun = aprox, color = 'blue')
ggplot(data, aes(x=r, y=g)) + geom_bar(stat="identity", fill="steelblue") +
stat_function(fun = aprox, color = 'blue') + xlim(0,20)
ggplot(data, aes(x=r, y=g)) + geom_bar(stat="identity", fill="steelblue") +
stat_function(fun = aprox, color = 'blue') + xlim(0,30)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
aprox <- function(x) (1/(sqrt(lambda*5.1875)))*dnorm((x - lambda*(31/16))/sqrt(lambda*5.1875))
ggplot(data, aes(x=r, y=g)) + geom_bar(stat="identity", fill="steelblue")
+    stat_function(fun = aprox, color = 'blue') + xlim(0,30)
ggplot(data, aes(x=r, y=g)) + geom_bar(stat="identity", fill="steelblue") +
stat_function(fun = aprox, color = 'blue') + xlim(0,30)
source("~/.active-rstudio-document", echo=TRUE)
aprox <- function(x) (1/(sqrt(lambda*(14/3))))*dnorm((x - lambda*2/sqrt(lambda*(14/3)))
ggplot(data, aes(x=r, y=g)) + geom_bar(stat="identity", fill="steelblue") +
stat_function(fun = aprox, color = 'blue') + xlim(0,30)
aprox <- function(x) (1/(sqrt(lambda*(14/3))))*dnorm((x - lambda*2)/sqrt(lambda*(14/3)))
ggplot(data, aes(x=r, y=g)) + geom_bar(stat="identity", fill="steelblue") +
stat_function(fun = aprox, color = 'blue') + xlim(0,30)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
library(haven)
nls_panel <- read_dta("Downloads/nls_panel.dta")
View(nls_panel)
attach(nls_panel)
library(knitr)
source("~/Desktop/codigosde R/econometría/video_12.R", echo=TRUE)
library(nlWaldTest)
install.packages('nlWaldTest')
source("~/Desktop/codigosde R/econometría/video_12.R", echo=TRUE)
source("~/Desktop/codigosde R/econometría/video_12.R", echo=TRUE)
nlspd <- pdata.frane(nls_panel ,  index = c('id','year'))
smpl <- nlspd[nlspd$id %in% c(1,2),c(1:6, 14:15) ]
tbl <- xtable(smpl)
kable(tbl, digits= 4 , align = 'c', caption = 'muestra')
attach(nls_panel)
nls_panel <- read_dta("Downloads/nls_panel.dta")
attach(nls_panel)
nlspd <- pdata.frane(nls_panel ,  index = c('id','year'))
library(plm)
library(tseries)
library(dynlm)
library(vars)
library(nlWaldTest)
library(lmtest)
library(broom)
library(car)
library(sandwich)
library(knitr)
library(forecast)
library(systemfit)
library(AER)
library(xtable)
library(haven)
nls_panel <- read_dta("Downloads/nls_panel.dta")
attach(nls_panel)
nlspd <- pdata.frane(nls_panel ,  index = c('id','year'))
tbl <- xtable(smpl)
smpl <- nlspd[nlspd$id %in% c(1,2),c(1:6, 14:15) ]
nlspd <- pdata.frane(nls_panel ,  index = c('id','year'))
nlspd <- pdata.frame(nls_panel ,  index = c('id','year'))
smpl <- nlspd[nlspd$id %in% c(1,2),c(1:6, 14:15) ]
tbl <- xtable(smpl)
kable(tbl, digits= 4 , align = 'c', caption = 'muestra')
pdim(nlsp)
pdim(nlspd)
#Modelo de datos panel para el salario
wage.pooled <- plm(lwage~educ + exper+ I(exper^2)+ tenure + I(tenure^2)+ black+south+union )
#Modelo de datos panel para el salario
wage.pooled <- plm(lwage ~ educ + exper+ I(exper^2)+ tenure + I(tenure^2)+ black+south+union)
#Modelo de datos panel para el salario
wage.pooled <- plm(lwage ~ educ + exper+ I(exper^2)+ tenure + I(tenure^2)+ black+south+union,
data = nls_panel)
#Modelo de datos panel para el salario
wage.pooled <- plm(lwage ~ educ + exper+ I(exper^2)+ tenure + I(tenure^2)+ black+south+union,
data = nls_panel)
kable(tidy(wage.pooled), digits = 3, caption = 'Modelo')
summary(wage.pooled)
kable(tidy(wage.pooled), digits = 3, caption = 'Modelo para el Salario')
summary(wage.pooled)
nls10 <- pdata.frame(nls_panel[nls_panel$id %in% 1:10,])
nls10
kable(nls10)
age.fixed <- lm(lwage ~ exper + I(exper^2)+ tenure+ I(tenure^2) + union +
factor(id) - 1 , data = nls10)
summary(age.fixed)
kable(tidy(age.fixed), digits = 3, caption = 'Modelo para el Salario')
#Modelo de efectos dijos sin crear variables dummy
wage.within <- lm(lwage ~ exper + I(exper^2) +tenure + I(tenure^2) + south+ union,
data = nlspd,
model = 'within')
#Modelo de efectos dijos sin crear variables dummy
wage.within <- lm(lwage ~ exper + I(exper^2) +tenure + I(tenure^2) + south+ union,
data = nlspd,
model = 'within')
#Modelo de efectos dijos sin crear variables dummy
wage.within <- lm(lwage ~ exper + I(exper^2) +tenure + I(tenure^2) + south+ union,
data = nlspd,
model = 'within')
#Modelo de efectos dijos sin crear variables dummy
wage.within <- plm(lwage ~ exper + I(exper^2) + tenure + I(tenure^2) + south + union,
data = nlspd,
model = 'within')
tbl <- tidy(wage, within )
tbl <- tidy(wage , within )
tbl <- tidy(wage.within )
kable(tbl, digist = 5 , caption = 'Modelo de efectos dijos de estimador hacia adentro')
summary(wage.within)
#ahora con 10
wage10.within <- plm(lwage ~ exper + I(exper^2) + tenure + I(tenure^2) + south + union,
data = nls10,
model = 'within')
tbl <- tidy(wage.within )
kable(tbl, digist = 5 , caption = 'Modelo de efectos dijos de estimador hacia adentro 10 individuos')
kable(tbl, digist = 5 , caption = 'Modelo de efectos dijos de estimador hacia adentro, 10 individuos')
library(actuar)
pweibull(100,.3,1100,FALSE)
source("~/.active-rstudio-document", echo=TRUE)
runApp('Desktop/codigosde R/Modelos de Pérdida/Dashboard_severidad.R')
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
#### distribuciones de frecuencia
library(actuar)
library(fitdistrplus)
library(goftest)
#Funciones de Densidad
n = 10
p = .3
lambda = 2
r= 10
fden <- dbinom(0:10,n,p)
fdis <- pbinom(0:10,n,p)
fsob <- 1 - fdis
par(mfrow= c(2,3))
barplot(fden,main = 'función de densidad', col= 2)
barplot(fdis,main = 'función de distribución', col= 3)
barplot(fsob,main = 'función de sobrevivencia', col= 4)
plot(fden,type = 'b', lwd=3, main= 'Función de Densidad', col = 2 )
plot(fdis,type = 'b', lwd=3, main= 'Función de Distribución', col = 3 )
plot(fsob,type = 'b', lwd=3, main= 'Función de Sobrevivencia', col = 4 )
### Dsitribuciones de la clase (a,b,0) y (a,b,1)
library(actuar) # <- tiene distribuciones de las clases
#parámetros
n = 10
p = .3
lambda = 2
r= 10
p0 = 0.2
fden <- dbinom(0:10, n, p)
fmod <- dzmbinom(0:10, n, p,p0)
ftrun <- dztbinom(0:10, n, p)
par(mfrow= c(2,3))
barplot(fden,main = 'función de densidad', col= 2)
barplot(fmod,main = 'función modificada', col= 3)
barplot(ftrun,main = 'función de truncada', col= 4)
plot(fden,type = 'b', lwd=3, main= 'Función de Densidad', col = 2 )
plot(fmod,type = 'b', lwd=3, main= 'Función de modificada', col = 3 )
plot(ftrun,type = 'b', lwd=3, main= 'Función de truncada', col = 4 )
fden <- dpois(0:10, lambda)
fmod <- dzmpois(0:10, lambda,p0)
ftrun <- dztpois(0:10, lambda)
par(mfrow= c(2,3))
barplot(fden,main = 'función de densidad', col= 2)
barplot(fmod,main = 'función modificada', col= 3)
barplot(ftrun,main = 'función de truncada', col= 4)
plot(fden,type = 'b', lwd=3, main= 'Función de Densidad', col = 2 )
plot(fmod,type = 'b', lwd=3, main= 'Función de modificada', col = 3 )
plot(ftrun,type = 'b', lwd=3, main= 'Función de truncada', col = 4 )
#Caso 1.- Variables Originales
y = rpois(1000, 1) #<- obtencion de datos
mod1 <- fitdist(y, 'binom', method = 'mle',
discrete = TRUE, start = list(prob= p),
fix.arg = list(size = n))
summary(mod1)
mod2 <- fitdist(y, 'pois', method = 'mle',
discrete = TRUE, start = list(lambda= lambda))
summary(mod2)
mod3 <- fitdist(y, 'nbinom', method = 'mle',
discrete = TRUE, start = list(size=r, prob=p))
summary(mod3)
gofstat(list(
mod1,mod2,mod3
), fitnames = c("Binomial","Poisson", "Binomial Negativo"))
par(mfrow = c(2,2))
denscomp(list(mod1,mod2, mod3),
legendtext = c('Binomial','Poisson','BinN'))
cdfcomp(list(mod1,mod2, mod3),
legendtext = c('Binomial','Poisson','BinN'))
ppcomp(list(mod1,mod2, mod3),
legendtext = c('Binomial','Poisson','BinN'))
qqcomp(list(mod1,mod2, mod3),
legendtext = c('Binomial','Poisson','BinN'))
# Caso 2 .- ajuste con funciones de la clas (a,b,0) y (a,b,1)
#parámetros
n = 100
p = .3
lambda = 2
r= 10
p0 = 0.2
y <- rzmnbinom(1000, r, p, p0)
mod4 <- fitdist( y, 'zmbinom', 'mle',discrete = T,
start = list(prob= p ),
fix.arg = list(size=n, p0 = p0))
summary(mod4)
mod5 <- fitdist( y, 'zmpois', 'mle', discrete =  T,
start =  list(lambda = lambda), #en donde va a empezar
fix.arg = list(p0 = p0))      #argumentos que dejamos fijos
summary(mod5)
mod6 <- fitdist( y , 'zmnbinom', 'mle', discrete = T,
start = list(prob = p), fix.arg = list(size = r , p0 = p0 ))
summary(mod6)
gofstat(list(mod4, mod5, mod6),
fitnames = c('ZMBin','ZMPois','ZMNbin'))
denscomp(list(mod4,mod5, mod6),
legendtext = c('ZMBin','ZMPois','ZMNbin'))
cdfcomp(list(mod4,mod5, mod6),
legendtext = c('ZMBin','ZMPois','ZMNbin'))
ppcomp(list(mod4,mod5, mod6),
legendtext = c('ZMBin','ZMPois','ZMNbin'))
qqcomp(list(mod4,mod5, mod6),
legendtext = c('ZMBin','ZMPois','ZMNbin'), xlim = c(0,50))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
par(mfrow= c(2,3))
barplot(fden,main = 'función de densidad', col= 2)
barplot(fdis,main = 'función de distribución', col= 3)
barplot(fsob,main = 'función de sobrevivencia', col= 4)
plot(fden,type = 'b', lwd=3, main= 'Función de Densidad', col = 2 )
plot(fdis,type = 'b', lwd=3, main= 'Función de Distribución', col = 3 )
plot(fsob,type = 'b', lwd=3, main= 'Función de Sobrevivencia', col = 4 )
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# Dashboard de Clase (a,b,0) y (a,b,1)
library(fitdistrplus)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
x = c(0:10)
x
y <- fun.1(x)
fun.1 <- function(x) cur_den(x,typ1)
y <- fun.1(x)
source("~/.active-rstudio-document", echo=TRUE)
body <- dashboardBody(
fluidRow(
box(title = 'Modificaciones',
numericInput('ene','Selecciona el Valor de n',
value = 10, min = 0,max = 30),
numericInput('pe','Selecciona el Valor de p',
value = .5, min = 0,max = 1,step = .05),
numericInput('lambda','Selecciona el Valor de lambda',
value = 5, min = 0,max = 10),
numericInput('ere','Selecciona el Valor de r',
value = 5, min = 0,max = 10),
br()),
box(plotOutput("grafica"))
)
)
source("~/.active-rstudio-document", echo=TRUE)
runApp('Desktop/codigosde R/Modelos de Pérdida/dash_frecuencia.R')
fden <- dbinom(0:10, n, p)
fmod <- dzmbinom(0:10, n, p,p0)
ftrun <- dztbinom(0:10, n, p)
par(mfrow= c(2,3))
barplot(fden,main = 'función de densidad', col= 2)
barplot(fmod,main = 'función modificada', col= 3)
barplot(ftrun,main = 'función de truncada', col= 4)
plot(fden,type = 'b', lwd=3, main= 'Función de Densidad', col = 2 )
plot(fmod,type = 'b', lwd=3, main= 'Función de modificada', col = 3 )
plot(ftrun,type = 'b', lwd=3, main= 'Función de truncada', col = 4 )
runApp('Desktop/codigosde R/Modelos de Pérdida/dash_frecuencia.R')
runApp('Desktop/codigosde R/Modelos de Pérdida/dash_frecuencia.R')
#Funciones de Densidad
n = 10
p = .3
lambda = 2
r= 10
fden <- dbinom(0:10,n,p)
fdis <- pbinom(0:10,n,p)
fsob <- 1 - fdis
par(mfrow= c(2,3))
barplot(fden,main = 'función de densidad', col= 2)
barplot(fdis,main = 'función de distribución', col= 3)
barplot(fsob,main = 'función de sobrevivencia', col= 4)
runApp('Desktop/codigosde R/Modelos de Pérdida/dash_frecuencia.R')
runApp('Desktop/codigosde R/Modelos de Pérdida/dash_frecuencia.R')
plot(fden,type = 'b', lwd=3, main= 'Función de Densidad', col = 2 )
plot(fdis,type = 'b', lwd=3, main= 'Función de Distribución', col = 3 )
plot(fsob,type = 'b', lwd=3, main= 'Función de Sobrevivencia', col = 4 )
#Caso 2 Poisson(lambda)
fden <- dpois(0:10,lambda)
fdis <- dpois(0:10,lambda)
fsob <- 1 - fdis
par(mfrow= c(2,3))
barplot(fden,main = 'función de densidad', col= 2)
barplot(fdis,main = 'función de distribución', col= 3)
barplot(fsob,main = 'función de sobrevivencia', col= 4)
runApp('Desktop/codigosde R/Modelos de Pérdida/dash_frecuencia.R')
runApp('Desktop/codigosde R/Modelos de Pérdida/Dash_severidad.R')
runApp('Desktop/codigosde R/Modelos de Pérdida/Dash_severidad.R')
runApp('Desktop/codigosde R/Modelos de Pérdida/dash_frecuencia.R')
runApp('Desktop/codigosde R/Modelos de Pérdida/dash_frecuencia.R')
library(tidyr)
library(reshape)
install.packages('reshape')
library(reshape)
runApp('Desktop/codigosde R/Modelos de Pérdida/dash_frecuencia.R')
runApp('Desktop/codigosde R/Modelos de Pérdida/dash_frecuencia.R')
#### distribuciones de frecuencia
library(actuar)
library(fitdistrplus)
library(goftest)
#Funciones de Densidad
n = 10
p = .3
lambda = 2
r= 10
fden <- dbinom(0:10,n,p)
fdis <- pbinom(0:10,n,p)
fsob <- 1 - fdis
par(mfrow= c(2,3))
barplot(fden,main = 'función de densidad', col= 2)
barplot(fdis,main = 'función de distribución', col= 3)
barplot(fsob,main = 'función de sobrevivencia', col= 4)
plot(fden,type = 'b', lwd=3, main= 'Función de Densidad', col = 2 )
plot(fdis,type = 'b', lwd=3, main= 'Función de Distribución', col = 3 )
plot(fsob,type = 'b', lwd=3, main= 'Función de Sobrevivencia', col = 4 )
#Caso 2 Poisson(lambda)
fden <- dpois(0:10,lambda)
fdis <- dpois(0:10,lambda)
fsob <- 1 - fdis
par(mfrow= c(2,3))
barplot(fden,main = 'función de densidad', col= 2)
barplot(fdis,main = 'función de distribución', col= 3)
barplot(fsob,main = 'función de sobrevivencia', col= 4)
plot(fden,type = 'b', lwd=3, main= 'Función de Densidad', col = 2 )
plot(fdis,type = 'b', lwd=3, main= 'Función de Distribución', col = 3 )
plot(fsob,type = 'b', lwd=3, main= 'Función de Sobrevivencia', col = 4 )
#Caso 3 Geométrica(r,p)
fden <- dgeom(0:10,p)
fdis <- dpois(0:10,p)
fsob <- 1 - fdis
par(mfrow= c(2,3))
barplot(fden,main = 'función de densidad', col= 2)
barplot(fdis,main = 'función de distribución', col= 3)
barplot(fsob,main = 'función de sobrevivencia', col= 4)
plot(fden,type = 'b', lwd=3, main= 'Función de Densidad', col = 2 )
plot(fdis,type = 'b', lwd=3, main= 'Función de Distribución', col = 3 )
plot(fsob,type = 'b', lwd=3, main= 'Función de Sobrevivencia', col = 4 )
#Caso 4 binomial negativa(r,p)
fden <- dnbinom(0:10,r,p)
fdis <- pnbinom(0:10,r,p)
fsob <- 1 - fdis
par(mfrow= c(2,3))
barplot(fden,main = 'función de densidad', col= 2)
barplot(fdis,main = 'función de distribución', col= 3)
barplot(fsob,main = 'función de sobrevivencia', col= 4)
plot(fden,type = 'b', lwd=3, main= 'Función de Densidad', col = 2 )
plot(fdis,type = 'b', lwd=3, main= 'Función de Distribución', col = 3 )
plot(fsob,type = 'b', lwd=3, main= 'Función de Sobrevivencia', col = 4 )
### Dsitribuciones de la clase (a,b,0) y (a,b,1)
library(actuar) # <- tiene distribuciones de las clases
#parámetros
n = 10
p = .3
lambda = 2
r= 10
p0 = 0.2
fden <- dbinom(0:10, n, p)
fmod <- dzmbinom(0:10, n, p,p0)
ftrun <- dztbinom(0:10, n, p)
par(mfrow= c(2,3))
barplot(fden,main = 'función de densidad', col= 2)
barplot(fmod,main = 'función modificada', col= 3)
barplot(ftrun,main = 'función de truncada', col= 4)
plot(fden,type = 'b', lwd=3, main= 'Función de Densidad', col = 2 )
plot(fmod,type = 'b', lwd=3, main= 'Función de modificada', col = 3 )
plot(ftrun,type = 'b', lwd=3, main= 'Función de truncada', col = 4 )
fden <- dpois(0:10, lambda)
fmod <- dzmpois(0:10, lambda,p0)
ftrun <- dztpois(0:10, lambda)
par(mfrow= c(2,3))
barplot(fden,main = 'función de densidad', col= 2)
barplot(fmod,main = 'función modificada', col= 3)
barplot(ftrun,main = 'función de truncada', col= 4)
plot(fden,type = 'b', lwd=3, main= 'Función de Densidad', col = 2 )
plot(fmod,type = 'b', lwd=3, main= 'Función de modificada', col = 3 )
plot(ftrun,type = 'b', lwd=3, main= 'Función de truncada', col = 4 )
fden <- dgeom(0:10,p)
fmod <- dzmgeom(0:10, p,p0)
ftrun <- dztgeom(0:10, p)
par(mfrow= c(2,3))
barplot(fden,main = 'función de densidad', col= 2)
barplot(fmod,main = 'función modificada', col= 3)
barplot(ftrun,main = 'función de truncada', col= 4)
plot(fden,type = 'b', lwd=3, main= 'Función de Densidad', col = 2 )
plot(fmod,type = 'b', lwd=3, main= 'Función de modificada', col = 3 )
plot(ftrun,type = 'b', lwd=3, main= 'Función de truncada', col = 4 )
runApp('Desktop/codigosde R/Modelos de Pérdida/dash_frecuencia.R')
runApp('Desktop/codigosde R/Modelos de Pérdida/dash_frecuencia.R')
install.packages("dashboardthemes")
library(dashboardthemes)
runApp('Desktop/codigosde R/Modelos de Pérdida/dash_frecuencia.R')
runApp('Desktop/codigosde R/Modelos de Pérdida/dash_frecuencia.R')
runApp('Desktop/codigosde R/Modelos de Pérdida/dash_frecuencia.R')
runApp('Desktop/codigosde R/Modelos de Pérdida/dash_frecuencia.R')
runApp('Desktop/codigosde R/Modelos de Pérdida/dash_frecuencia.R')
